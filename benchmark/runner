'use strict';

var Benchmark = /** @type Benchmark */ require('benchmark').Benchmark;
var Suite = /** @type Suite */ Benchmark.Suite;
var reportFormat = require('./lib/reportFormat');

var expressAdapter = require('./adapter/express');
var fistAdapter = require('./adapter/fist');

//  Для более точной статистики (ОЧЕНЬ ДОЛГО ДЕЛАЕТ 1000)
Benchmark.options.minSamples = 1000;

var results = {};
var suite = new Suite();

function diff (a, b) {

    return ( ( ( a / b ) - 1 ) * 100 ).toFixed(2);
}

[
    {
        name: 'fist',
        body: fistAdapter
    }
    ,
    {
        name: 'express',
        body: expressAdapter
    }
].
    forEach(function (guilty) {
        var body = guilty.body;

        suite.add(guilty.name, function (deferred) {
            body(function (res) {

                if ( res.statusCode === 200 ) {
                    deferred.resolve();

                    return;
                }

                throw 'ERR';
            });
        }, {

            defer: true,

            onComplete: function () {
                results[guilty.name] = this.stats.mean;
                console.log( '%s: %s', guilty.name, reportFormat(this) );
            }
        });
    });

suite.on('complete', function () {
    console.log();
    console.log( '%d%', diff(results.express, results.fist) );
    console.log();
    process.exit(0);
});

suite.run({
    async: true,
    queued: true
});
